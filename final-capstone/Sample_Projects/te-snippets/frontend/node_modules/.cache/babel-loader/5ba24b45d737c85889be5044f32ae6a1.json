{"remainingRequest":"C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\src\\auth.js","dependencies":[{"path":"C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\src\\auth.js","mtime":1575906095535},{"path":"C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nexport default {\n  /**\r\n   * Returns the authentication token from local storage.\r\n   */\n  getToken: function getToken() {\n    try {\n      return localStorage.getItem('Authorization');\n    } catch (_unused) {\n      return null;\n    }\n  },\n\n  /**\r\n   * Parses and saves the authentication token.\r\n   * @param {String} token A JWT encoded token.\r\n   */\n  saveToken: function saveToken(token) {\n    localStorage.setItem('Authorization', token);\n  },\n\n  /**\r\n   * Invalidates the local authentication token.\r\n   */\n  destroyToken: function destroyToken() {\n    localStorage.removeItem('Authorization');\n  },\n\n  /**\r\n   * Returns the user represented by the authentication token (null if user is not authenticated).\r\n   * @function\r\n   */\n  getUser: function getUser() {\n    var token = localStorage.getItem('Authorization');\n    var user = null; // If a token exists then decode it\n\n    if (token) {\n      var base64Url = token.split('.')[1];\n      var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      var secondsSinceEpoch = new Date() / 1000;\n      var parsedToken = JSON.parse(window.atob(base64)); // If current date is after expiration date then destroy it\n\n      if (secondsSinceEpoch > parsedToken.exp) {\n        this.destroyToken();\n      } else {\n        user = parsedToken;\n      }\n    }\n\n    return user;\n  },\n  logout: function logout() {\n    localStorage.removeItem('Authorization');\n  }\n};",{"version":3,"sources":["C:\\Users\\GWeber\\git\\c-final-capstone-te-gram-team-hat\\final-capstone\\Sample_Projects\\te-snippets\\frontend\\src\\auth.js"],"names":["getToken","localStorage","getItem","saveToken","token","setItem","destroyToken","removeItem","getUser","user","base64Url","split","base64","replace","secondsSinceEpoch","Date","parsedToken","JSON","parse","window","atob","exp","logout"],"mappings":";;AAAA,eAAe;AACb;;;AAGAA,EAAAA,QAAQ,EAAE,oBAAW;AACnB,QAAI;AACF,aAAOC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAP;AACD,KAFD,CAEE,gBAAM;AACN,aAAO,IAAP;AACD;AACF,GAVY;;AAWb;;;;AAIAC,EAAAA,SAfa,qBAeHC,KAfG,EAeI;AACfH,IAAAA,YAAY,CAACI,OAAb,CAAqB,eAArB,EAAsCD,KAAtC;AACD,GAjBY;;AAkBb;;;AAGAE,EAAAA,YArBa,0BAqBE;AACbL,IAAAA,YAAY,CAACM,UAAb,CAAwB,eAAxB;AACD,GAvBY;;AAwBb;;;;AAIAC,EAAAA,OA5Ba,qBA4BH;AACR,QAAMJ,KAAK,GAAGH,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAd;AACA,QAAIO,IAAI,GAAG,IAAX,CAFQ,CAIR;;AACA,QAAIL,KAAJ,EAAW;AACT,UAAMM,SAAS,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAlB;AACA,UAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAf;AACA,UAAMC,iBAAiB,GAAG,IAAIC,IAAJ,KAAa,IAAvC;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYR,MAAZ,CAAX,CAApB,CAJS,CAMT;;AACA,UAAIE,iBAAiB,GAAGE,WAAW,CAACK,GAApC,EAAyC;AACvC,aAAKf,YAAL;AACD,OAFD,MAEO;AACLG,QAAAA,IAAI,GAAGO,WAAP;AACD;AACF;;AAED,WAAOP,IAAP;AACD,GAhDY;AAiDba,EAAAA,MAjDa,oBAiDJ;AACPrB,IAAAA,YAAY,CAACM,UAAb,CAAwB,eAAxB;AACD;AAnDY,CAAf","sourcesContent":["export default {\r\n  /**\r\n   * Returns the authentication token from local storage.\r\n   */\r\n  getToken: function() {\r\n    try {\r\n      return localStorage.getItem('Authorization');\r\n    } catch {\r\n      return null;\r\n    }\r\n  },\r\n  /**\r\n   * Parses and saves the authentication token.\r\n   * @param {String} token A JWT encoded token.\r\n   */\r\n  saveToken(token) {\r\n    localStorage.setItem('Authorization', token);\r\n  },\r\n  /**\r\n   * Invalidates the local authentication token.\r\n   */\r\n  destroyToken() {\r\n    localStorage.removeItem('Authorization');\r\n  },\r\n  /**\r\n   * Returns the user represented by the authentication token (null if user is not authenticated).\r\n   * @function\r\n   */\r\n  getUser() {\r\n    const token = localStorage.getItem('Authorization');\r\n    let user = null;\r\n\r\n    // If a token exists then decode it\r\n    if (token) {\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const secondsSinceEpoch = new Date() / 1000;\r\n      const parsedToken = JSON.parse(window.atob(base64));\r\n\r\n      // If current date is after expiration date then destroy it\r\n      if (secondsSinceEpoch > parsedToken.exp) {\r\n        this.destroyToken();\r\n      } else {\r\n        user = parsedToken;\r\n      }\r\n    }\r\n\r\n    return user;\r\n  },\r\n  logout() {\r\n    localStorage.removeItem('Authorization');\r\n  },\r\n};\r\n"]}]}